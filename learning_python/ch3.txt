# How can you start an interactive interpreter session?
# On windows you can type python on powershell,
# On linux, you can try python3 in the terminal

# Where do you type a system command line to launch a script file?
# on the terminal or command prompt

# Name four or more ways to run the code saved in a script file.
# import, exec, file clicks, IDLE's Run -> Run module

# Name two pitfalls related to clicking file icons on Windows.
# Scripts that print and then exit cause the output file to disappear immediately,
# before you can view the output (which is why the input trick comes in handy);
# error messages generated by your script also appear in an output window that closes
# before you can examine its contents

# Why might you need to reload a module
# Python only imports (loads) a module once per process, by default
# so if you've changed its source code and want to run the new version without
# stopping and restarting Python, you'll have to reload it. You must import 
# a module at least once before you can reload it. Running files of code from a system
# shell command line, via an icon click, or via an IDE such as IDLE generally makes this
# a nonissue as those launch schemes usually run the current version of the source code file each time.

# How do you run a script from within IDLE?
# Open the file you wish to run with idle and select Run -> Run Module.

# Name two pitfalls related to using IDLE
# Idle can still be hung by some programs - especially GUI programs that perform multithreading, also
# a script's variables are automatically imported to the interactive scope in IDLE, but not by python in general


# What is a namespace, and how does it relate to module files?
# A namespace is just a package of variables (i.e., names). It takes the form of an object with attributes in Python.
# Each module file is automatically a namespace - that is, a package of variables reflecting assignments made at the top
# level of the file. Namespaces help avoid name collisions in Python programs: because each module file is a self-contained
# namespace, files must explicitly import other files in order to use their names.

